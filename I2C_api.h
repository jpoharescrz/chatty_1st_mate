#ifndef I2C_API_H
#define I2C_API_H 1
/////////////////////////////////////////////////////////////////////////
////                          I2C_api.h                              ////
////   This file is included in the I2C_Master.c file and
////   other file that use I2C.
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
// uint8 I2C_Task_Rdy()
// 
// Returns TRUE if I2C Task is not initializing, False otherwise
///////////////////////////////////////////////////////////////////
uint8 I2C_Task_Rdy();

///////////////////////////////////////////////////////////////////
// void I2C_Xmt_Msg( char *MsgPtr, int8 SlaveAddr )
// 
// Sends the msg to the slave in one atomic function
///////////////////////////////////////////////////////////////////
void I2C_Xmt_Msg( int8 SlaveAddr, char *MsgPtr );

///////////////////////////////////////////////////////////////////
// int8 I2C_GetFreeByteCnt()
// 
// Returns the number of free bytes in the tx buffer
///////////////////////////////////////////////////////////////////
int8 I2C_GetFreeByteCnt();

///////////////////////////////////////////////////////////////////
// int8 I2C_SlaveAttached( int8 SlaveAddr )
// 
// Returns true if the slave is attached
///////////////////////////////////////////////////////////////////
int8 I2C_SlaveAttached( int8 SlaveAddr );

///////////////////////////////////////////////////////////////////
// void I2C_Set_RegValue( int8 SlaveAddr, int8 Reg, int8 Value )
// 
// Sends the msg to the slave in one atomic function
///////////////////////////////////////////////////////////////////
uint8 I2C_Set_RegValue( int8 SlaveAddr, int8 Reg, uint8 Value);

///////////////////////////////////////////////////////////////////
// uint8 I2C_Get_RegValue( int8 SlaveAddr, int8 Reg, uint8 *value_ptr, int8 cnt  )
// 
// Reads the slave register in one atomic function
///////////////////////////////////////////////////////////////////
uint8 I2C_Get_RegValues( int8 SlaveAddr, int8 Reg, int8 cnt, int8 TaskId, uint8 TaskSgnl, uint8 *read_ptr );

#endif
